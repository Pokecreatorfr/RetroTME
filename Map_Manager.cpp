#include "pch.h"
#include "Map_Manager.h"

Map_Manager::Map_Manager(void)
{
}

Map_Manager::~Map_Manager(void)
{
}

void Map_Manager::set_map_path(std::string path)
{
	map_path = path;
}

void Map_Manager::save_maps()
{
	// save the maps
	std::ofstream map_file;
	map_file.open(map_path);
	// includes 
	map_file << "#pragma once\n";
	map_file << "#include <iostream>\n";
	map_file << "#include <vector>\n";
	map_file << "\n";
	map_file << "____________________________________________________\n";
	map_file << "|This file is automatically generated by RetroTME. |\n";
	map_file << "|				Dont edit this file.				|\n";
	map_file << "|__________________________________________________|\n";
	map_file << "\n";
	map_file << "\n";
	map_file << "struct Map\n";
	map_file << "{\n";
	map_file << "\t\tstd::string name;\n";
	map_file << "\t\tint height;\n";
	map_file << "\t\tint width;\n";
	map_file << "\t\tstd::vector<std::vector<int>> tilemaps;\n";
	map_file << "\t\tstd::vector<int> collision;\n";
	map_file << "\t\tTileset* tileset;\n";
	map_file << "};\n";
	map_file << "\n";

	// create all maps with map_name as name
	for (int i = 0; i < maps.size(); i++)
	{
		map_file << 'Map ' << maps[i]->map_name << ";\n";
		map_file << "{\n";
		map_file << "\t\t" << maps[i]->name << ",\n";
		map_file << "\t\t" << maps[i]->height << ",\n";
		map_file << "\t\t" << maps[i]->width << ",\n";
		map_file << "\t\t{\n";
		for (int j = 0; j < maps[i]->tilemaps.size(); j++)
		{
			map_file << "\t\t\t{";
			for (int k = 0; k < maps[i]->tilemaps[j].size(); k++)
			{
				map_file << maps[i]->tilemaps[j][k];
				if (k < maps[i]->tilemaps[j].size() - 1)
				{
					map_file << ",";
				}
			}
			map_file << "}";
			if (j < maps[i]->tilemaps.size() - 1)
			{
				map_file << ",";
			}
			map_file << "\n";
		}
		map_file << "\t\t},\n";
		map_file << "\t\t{";
		for (int j = 0; j < maps[i]->collision.size(); j++)
		{
			map_file << maps[i]->collision[j];
			if (j < maps[i]->collision.size() - 1)
			{
				map_file << ",";
			}
		}
		map_file << "},\n";
		map_file << "\t\t" << maps[i]->tileset->tileset_name << "\n";
		map_file << "};\n";
		map_file << "\n";
	}
	map_file.close();
}

void Map_Manager::load_maps()
{
	std::ifstream map_file;
	map_file.open(map_path);
	// read the maps
	std::string line;
	std::string map_name;
	std::string name;
	int height;
	int width;
	std::vector<std::vector<int>> tilemaps;
	std::vector<int> collision;
	// read the file line by line
	bool ismap = false;
	while (std::getline(map_file,line))
	{
		// check if the line is a map
		if (line.find("Map") != std::string::npos && ismap == false)
		{
			// if it is a map, set ismap to true
			ismap = true;
			// get the map name
			map_name = line.substr(line.find(" ") + 1, line.find(";") - line.find(" ") - 1);
		}

		// if the line is not a map, check if it is a name
		if (line.find("name") != std::string::npos && ismap == true)
		{
			// if it is a name, get the name
			name = line.substr(line.find("\"") + 1, line.find("\"", line.find("\"") + 1) - line.find("\"") - 1);
		}

		// if the line is not a map, check if it is a height
		if (line.find("height") != std::string::npos && ismap == true)
		{
			// if it is a height, get the height
			height = std::stoi(line.substr(line.find(" ") + 1, line.find(";") - line.find(" ") - 1));
		}

		// if the line is not a map, check if it is a width
		if (line.find("width") != std::string::npos && ismap == true)
		{
			// if it is a width, get the width
			width = std::stoi(line.substr(line.find(" ") + 1, line.find(";") - line.find(" ") - 1));
		}

		// if the line is not a map, check if it is a tilemap
		if (line.find("tilemaps") != std::string::npos && ismap == true)
		{
			// if it is a tilemap, get the tilemap
			std::vector<int> tilemap = {};
			std::string tilemap_string = line.substr(line.find("{") + 1, line.find("}") - line.find("{") - 1);
			// get the tilemap
			while (tilemap_string.find(",") != std::string::npos)
			{
				tilemap.push_back(std::stoi(tilemap_string.substr(0, tilemap_string.find(","))));
				tilemap_string = tilemap_string.substr(tilemap_string.find(",") + 1, tilemap_string.length() - tilemap_string.find(",") - 1);
			}
			tilemap.push_back(std::stoi(tilemap_string));
			tilemaps.push_back(tilemap);
		}

		// if the line is not a map, check if it is a collision
		if (line.find("collision") != std::string::npos && ismap == true)
		{
			// if it is a collision, get the collision
			std::vector<int> collision;
			std::string collision_string = line.substr(line.find("{") + 1, line.find("}") - line.find("{") - 1);
			// get the collision
			while (collision_string.find(",") != std::string::npos)
			{
				collision.push_back(std::stoi(collision_string.substr(0, collision_string.find(","))));
				collision_string = collision_string.substr(collision_string.find(",") + 1, collision_string.length() - collision_string.find(",") - 1);
			}
			collision.push_back(std::stoi(collision_string));
		}

		// if the line is a };, then the map is done
		if (line.find("};") != std::string::npos && ismap == true)
		{
			// create the map
			Map *map = new Map(map_name, name, height, width, tilemaps, collision);
			// add the map to the map vector
			maps.push_back(map);
			// reset the variables
			ismap = false;
			map_name = "";
			name = "";
			height = 0;
			width = 0;
			tilemaps.clear();
			collision.clear();
		}
		
	}
}

